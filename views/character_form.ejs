<!-- Complete character-sheet-container div -->
<div class="character-sheet-container">
  <div class="character-sheet-header">
    <h2><%= isNew ? 'Create New Character' : 'Edit Character' %></h2>
    <% if (!isNew) { %>
      <div class="save-status" id="saveStatus">All changes saved</div>
    <% } %>
    <div class="character-actions">
      <a href="/characters" class="btn btn-secondary">Back to Characters</a>
      <% if (isNew) { %>
        <button type="submit" form="characterForm" class="btn btn-primary">Create Character</button>
      <% } %>
    </div>
  </div>
  
  <form id="characterForm" action="/characters<%= isNew ? '' : '/' + characterId %>" method="POST" class="character-sheet">
    <% if (!isNew) { %>
      <input type="hidden" name="_method" value="PUT">
    <% } %>
    
    <!-- Character Header Section -->
    <div class="character-header-section">
      <!-- Character name section -->
      <div class="form-group character-name-group">
        <label for="name">Character Name</label>
        <input type="text" id="name" name="name" value="<%= character.name %>" class="autosave editable-field" data-field="name" required readonly>
      </div>
      
      <!-- Character details section with proficiency in last row -->
      <div class="details-labels-row">
        <label for="class">Class</label>
        <label for="level">Level</label>
        <label for="race">Race</label>
        <label for="background">Background</label>
        <label for="alignment">Alignment</label>
        <label class="proficiency-label">Proficiency Bonus</label>
      </div>
      
      <div class="details-fields-row">
        <input type="text" id="class" name="class" value="<%= character.class %>" class="autosave editable-field" data-field="class" readonly>
        <input type="number" id="level" name="level" value="<%= character.level %>" min="1" max="20" class="autosave editable-field" data-field="level" readonly>
        <input type="text" id="race" name="race" value="<%= character.race %>" class="autosave editable-field" data-field="race" readonly>
        <input type="text" id="background" name="background" value="<%= character.background || '' %>" class="autosave editable-field" data-field="background" readonly>
        <select id="alignment" name="alignment" class="autosave editable-field" data-field="alignment" readonly>
          <option value="" <%= !character.alignment ? 'selected' : '' %>>Select Alignment</option>
          <option value="Lawful Good" <%= character.alignment === 'Lawful Good' ? 'selected' : '' %>>Lawful Good</option>
          <option value="Neutral Good" <%= character.alignment === 'Neutral Good' ? 'selected' : '' %>>Neutral Good</option>
          <option value="Chaotic Good" <%= character.alignment === 'Chaotic Good' ? 'selected' : '' %>>Chaotic Good</option>
          <option value="Lawful Neutral" <%= character.alignment === 'Lawful Neutral' ? 'selected' : '' %>>Lawful Neutral</option>
          <option value="True Neutral" <%= character.alignment === 'True Neutral' ? 'selected' : '' %>>True Neutral</option>
          <option value="Chaotic Neutral" <%= character.alignment === 'Chaotic Neutral' ? 'selected' : '' %>>Chaotic Neutral</option>
          <option value="Lawful Evil" <%= character.alignment === 'Lawful Evil' ? 'selected' : '' %>>Lawful Evil</option>
          <option value="Neutral Evil" <%= character.alignment === 'Neutral Evil' ? 'selected' : '' %>>Neutral Evil</option>
          <option value="Chaotic Evil" <%= character.alignment === 'Chaotic Evil' ? 'selected' : '' %>>Chaotic Evil</option>
        </select>
        <div class="proficiency-display">
          <span id="proficiencyBonus">+<%= Math.floor((character.level - 1) / 4) + 2 %></span>
        </div>
      </div>
    </div>
    
    <!-- Main Character Sheet Layout (3 columns) -->
    <div class="character-main-section">
      <!-- Left Column: Abilities and Skills -->
      <div class="character-column abilities-column">

        <!-- Abilities in a grid layout (2x3) -->



<!-- This replaces the current abilities section in character_form.ejs -->
<h3 class="abilities-title">Abilities</h3>
<div class="abilities-grid">
  <% const abilities = [
    { key: 'strength', name: 'STRENGTH' },
    { key: 'dexterity', name: 'DEXTERITY' },
    { key: 'constitution', name: 'CONSTITUTION' },
    { key: 'intelligence', name: 'INTELLIGENCE', icon: 'circle' },
    { key: 'wisdom', name: 'WISDOM', icon: 'circle' },
    { key: 'charisma', name: 'CHARISMA', icon: 'star' }
  ]; %>
  
  <% abilities.forEach(ability => { %>
    <div class="ability-card <%= character.useManaAbility === ability.key ? 'ability-card-active' : '' %>">
      <div class="ability-name-container">
        <div class="ability-name"><%= ability.name %></div>
<!-- Update the icon part in your abilities loop -->
<% if (ability.key === 'intelligence' || ability.key === 'wisdom' || ability.key === 'charisma') { %>
  <span 
    class="mana-toggle-icon" 
    data-ability="<%= ability.key %>" 
    data-active="<%= character.useManaAbility === ability.key %>"
  >○</span>
<% } %>
      </div>
      
      <div class="ability-value">
        <input 
          type="number" 
          id="<%= ability.key %>" 
          name="<%= ability.key %>" 
          value="<%= character.abilities[ability.key] %>" 
          min="1" 
          max="30" 
          class="ability-score autosave editable-field" 
          data-field="abilities.<%= ability.key %>"
          readonly
        >
      </div>
      
      <div class="ability-modifier">
        <%= Math.floor((character.abilities[ability.key] - 10) / 2) >= 0 ? '+' : '' %><%= Math.floor((character.abilities[ability.key] - 10) / 2) %>
      </div>
    </div>
  <% }); %>
</div>


        <h3>Skills</h3>
        <div class="skills-list" id="skillsContainer">
          <% character.skills.forEach((skill, index) => { %>
            <div class="skill-item">
              <input 
                type="checkbox" 
                id="skill_<%= index %>" 
                class="skill-proficient" 
                <%= skill.proficient ? 'checked' : '' %> 
                data-index="<%= index %>"
              >
              <span class="skill-modifier">
                <%= Math.floor((character.abilities[skill.ability] - 10) / 2) + (skill.proficient ? 2 : 0) >= 0 ? '+' : '' %><%= Math.floor((character.abilities[skill.ability] - 10) / 2) + (skill.proficient ? 2 : 0) %>
              </span>
              <span class="skill-name"><%= skill.name %></span>
              <span class="skill-ability">(<%= skill.ability.charAt(0).toUpperCase() %>)</span>
            </div>
          <% }); %>
          
          <!-- Custom Skills -->
          <% if (character.customSkills && character.customSkills.length > 0) { %>
            <% character.customSkills.forEach((skill, index) => { %>
              <div class="skill-item custom-skill">
                <input 
                  type="checkbox" 
                  id="custom_skill_<%= index %>" 
                  class="skill-proficient" 
                  <%= skill.proficient ? 'checked' : '' %> 
                  data-index="<%= index %>"
                  data-custom="true"
                >
                <span class="skill-modifier">
                  <%= Math.floor((character.abilities[skill.ability] - 10) / 2) + (skill.proficient ? 2 : 0) >= 0 ? '+' : '' %><%= Math.floor((character.abilities[skill.ability] - 10) / 2) + (skill.proficient ? 2 : 0) %>
                </span>
                <input 
                  type="text" 
                  class="custom-skill-name" 
                  value="<%= skill.name %>" 
                  data-index="<%= index %>"
                >
                <select class="custom-skill-ability" data-index="<%= index %>">
                  <% abilities.forEach(ability => { %>
                    <option value="<%= ability.key %>" <%= skill.ability === ability.key ? 'selected' : '' %>>
                      <%= ability.key.charAt(0).toUpperCase() %>
                    </option>
                  <% }); %>
                </select>
                <button type="button" class="remove-skill-btn" data-index="<%= index %>">×</button>
              </div>
            <% }); %>
          <% } %>
        </div>
        
        <button type="button" id="addSkillBtn" class="btn btn-small">Add Custom Skill</button>
      </div>
      
      <!-- Middle Column: Combat Stats -->
      <div class="character-column combat-column">
        <div class="combat-stats">
          <div class="stat-block">
            <label for="armorClass">AC</label>
            <input 
              type="number" 
              id="armorClass" 
              name="armorClass" 
              value="<%= character.armorClass || 10 %>" 
              class="autosave editable-field" 
              data-field="armorClass"
              readonly
            >
          </div>
          
          <div class="stat-block">
            <label for="initiative">Initiative</label>
            <input 
              type="number" 
              id="initiative" 
              name="initiative" 
              value="<%= character.initiative || 0 %>" 
              class="autosave editable-field" 
              data-field="initiative"
              readonly
            >
          </div>
          
          <div class="stat-block">
            <label for="speed">Speed</label>
            <input 
              type="number" 
              id="speed" 
              name="speed" 
              value="<%= character.speed || 30 %>" 
              class="autosave editable-field" 
              data-field="speed"
              readonly
            >
          </div>
        </div>

        <div class="hit-points">
          <h4 id="hpManaHeader">Hit Points<span id="manaHeaderText" style="<%= character.useManaAbility ? '' : 'display: none;' %>">&nbsp;and Mana</span></h4>
          <div class="hp-container">
            <div class="form-group">
              <label for="maxHitPoints">Maximum HP</label>
              <input 
                type="number" 
                id="maxHitPoints" 
                name="maxHitPoints" 
                value="<%= character.hitPoints ? character.hitPoints.maximum : '' %>" 
                class="autosave editable-field" 
                data-field="hitPoints.maximum"
                readonly
              >
            </div>
            
            <div class="form-group">
              <label for="currentHitPoints">Current HP</label>
              <input 
                type="number" 
                id="currentHitPoints" 
                name="currentHitPoints" 
                value="<%= character.hitPoints ? character.hitPoints.current : '' %>" 
                class="autosave editable-field" 
                data-field="hitPoints.current"
                readonly
              >
            </div>
          </div>
          
          <div class="hp-container mana-container" style="<%= character.useManaAbility ? '' : 'display: none;' %>">
            <div class="form-group">
              <label for="maxMana">Maximum Mana</label>
              <input 
                type="number" 
                id="maxMana" 
                name="maxMana" 
                value="<%= character.mana ? character.mana.maximum : '' %>" 
                class="autosave editable-field" 
                data-field="mana.maximum"
                readonly
              >
            </div>
            
            <div class="form-group">
              <label for="currentMana">Current Mana</label>
              <input 
                type="number" 
                id="currentMana" 
                name="currentMana" 
                value="<%= character.mana ? character.mana.current : '' %>" 
                class="autosave editable-field" 
                data-field="mana.current"
                readonly
              >
            </div>
          </div>
        </div>
        
        <div class="equipment-section">
          <h4>Equipment</h4>
          <textarea 
            id="equipment" 
            name="equipment" 
            class="autosave editable-field" 
            data-field="equipment"
            readonly
          ><%= character.equipment || '' %></textarea>
        </div>
      </div>
      
      <!-- Right Column: Features and Spells -->
      <div class="character-column features-column">
        <div class="features-section">
          <h4>Features & Traits</h4>
          <textarea 
            id="features" 
            name="features" 
            class="autosave editable-field" 
            data-field="features"
            readonly
          ><%= character.features || '' %></textarea>
        </div>
        
        <div class="spells-section">
          <h4>Spells</h4>
          <textarea 
            id="spells" 
            name="spells" 
            class="autosave editable-field" 
            data-field="spells"
            readonly
          ><%= character.spells || '' %></textarea>
        </div>
      </div>
    </div>
    
    <!-- Hidden fields for storing skills data -->
    <input type="hidden" id="skills" name="skills" value="<%= JSON.stringify(character.skills) %>">
    <input type="hidden" id="customSkills" name="customSkills" value="<%= JSON.stringify(character.customSkills || []) %>">
  </form>
</div>



<script>
document.addEventListener('DOMContentLoaded', function() {
  // Auto-save functionality
  let saveTimeout;
  const saveStatus = document.getElementById('saveStatus');
  const editableFields = document.querySelectorAll('.editable-field');
  
  // Make fields editable on click
  editableFields.forEach(field => {
    field.addEventListener('click', function() {
      this.readOnly = false;
      this.focus();
    });
    
    field.addEventListener('blur', function() {
      this.readOnly = true;
      
      if (this.classList.contains('autosave')) {
        saveField(this.dataset.field, this.value);
      }
    });
    
    field.addEventListener('keydown', function(e) {
      if (e.key === 'Enter' && this.tagName !== 'TEXTAREA') {
        this.blur();
      }
    });
  });
  
  // Special handling for select elements
  document.querySelectorAll('select.editable-field').forEach(select => {
    select.addEventListener('click', function() {
      this.removeAttribute('readonly');
    });
    
    select.addEventListener('change', function() {
      if (this.classList.contains('autosave')) {
        saveField(this.dataset.field, this.value);
      }
      setTimeout(() => {
        this.setAttribute('readonly', 'readonly');
      }, 100);
    });
    
    select.addEventListener('blur', function() {
      this.setAttribute('readonly', 'readonly');
    });
  });
  
  // Field save function
  function saveField(field, value) {
    if (!saveStatus) return;
    
    clearTimeout(saveTimeout);
    saveStatus.textContent = 'Saving...';
    saveStatus.className = 'save-status saving';
    
    saveTimeout = setTimeout(() => {
      const characterId = window.location.pathname.split('/').pop();
      
      fetch('/characters/' + characterId, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ field, value })
      })
      .then(response => response.json())
      .then(result => {
        saveStatus.textContent = 'All changes saved';
        saveStatus.className = 'save-status saved';
        
        setTimeout(() => {
          saveStatus.className = 'save-status';
        }, 2000);
        
        // If we're updating abilities, recalculate modifiers
        if (field.startsWith('abilities.')) {
          updateModifiers();
        }
        
        // Update level-dependent calculations when level changes
        if (field === 'level') {
          updateProficiencyBonus();
        }
        
        // If hit points maximum changes, ensure current HP is not greater than max
        if (field === 'hitPoints.maximum') {
          const maxHP = parseInt(value);
          const currentHP = parseInt(document.getElementById('currentHitPoints').value);
          
          if (currentHP > maxHP) {
            document.getElementById('currentHitPoints').value = maxHP;
            saveField('hitPoints.current', maxHP);
          }
        }
        
        // Similar check for mana points
        if (field === 'mana.maximum') {
          const maxMana = parseInt(value);
          const currentMana = parseInt(document.getElementById('currentMana').value);
          
          if (currentMana > maxMana) {
            document.getElementById('currentMana').value = maxMana;
            saveField('mana.current', maxMana);
          }
        }
      })
      .catch(error => {
        console.error("Error saving:", error);
        saveStatus.textContent = 'Error saving changes';
        saveStatus.className = 'save-status error';
      });
    }, 500);
  }
  
  // Make saveField available globally
  window.saveField = saveField;
  
  // Ability score change handling
  const abilityInputs = document.querySelectorAll('.ability-score');
  abilityInputs.forEach(input => {
    input.addEventListener('change', updateModifiers);
  });
  
  // Calculate and update ability modifiers and skill bonuses
  function updateModifiers() {
    // Update ability modifiers
    const abilities = {};
    abilityInputs.forEach(input => {
      const ability = input.id;
      const score = parseInt(input.value) || 0;
      const modifier = Math.floor((score - 10) / 2);
      abilities[ability] = score;
      
      // Find and update the modifier display
      const modifierDisplay = input.parentElement.nextElementSibling;
      if (modifierDisplay && modifierDisplay.classList.contains('ability-modifier')) {
        modifierDisplay.textContent = (modifier >= 0 ? '+' : '') + modifier;
      }
    });
    
    // Update skill modifiers
    const profBonus = parseInt(document.getElementById('proficiencyBonus').textContent.replace('+', '')) || 2;
    
    // Update standard skills
    const skillItems = document.querySelectorAll('.skill-item:not(.custom-skill)');
    const skills = JSON.parse(document.getElementById('skills').value);
    
    skillItems.forEach((item, index) => {
      if (index < skills.length) {
        const skillData = skills[index];
        const abilityScore = abilities[skillData.ability] || 10;
        const abilityMod = Math.floor((abilityScore - 10) / 2);
        const isProficient = item.querySelector('.skill-proficient').checked;
        const totalBonus = abilityMod + (isProficient ? profBonus : 0);
        
        const modifierDisplay = item.querySelector('.skill-modifier');
        if (modifierDisplay) {
          modifierDisplay.textContent = (totalBonus >= 0 ? '+' : '') + totalBonus;
        }
      }
    });
    
    // Update custom skills
    const customSkillItems = document.querySelectorAll('.skill-item.custom-skill');
    const customSkills = JSON.parse(document.getElementById('customSkills').value || '[]');
    
    customSkillItems.forEach((item, index) => {
      if (index < customSkills.length) {
        const skillData = customSkills[index];
        const abilityScore = abilities[skillData.ability] || 10;
        const abilityMod = Math.floor((abilityScore - 10) / 2);
        const isProficient = item.querySelector('.skill-proficient').checked;
        const totalBonus = abilityMod + (isProficient ? profBonus : 0);
        
        const modifierDisplay = item.querySelector('.skill-modifier');
        if (modifierDisplay) {
          modifierDisplay.textContent = (totalBonus >= 0 ? '+' : '') + totalBonus;
        }
      }
    });
  }
  
  // Update proficiency bonus when level changes
  document.getElementById('level').addEventListener('change', updateProficiencyBonus);
  
  function updateProficiencyBonus() {
    const level = parseInt(document.getElementById('level').value) || 1;
    const profBonus = Math.floor((level - 1) / 4) + 2;
    document.getElementById('proficiencyBonus').textContent = '+' + profBonus;
    
    // Update skill modifiers since proficiency bonus changed
    updateModifiers();
  }
  
  // Skills functionality
  const skillsContainer = document.getElementById('skillsContainer');
  const skillsInput = document.getElementById('skills');
  const customSkillsInput = document.getElementById('customSkills');
  let skills = JSON.parse(skillsInput.value);
  let customSkills = JSON.parse(customSkillsInput.value || '[]');
  
  // Skill proficiency toggle handling
  skillsContainer.addEventListener('change', function(e) {
    if (e.target.classList.contains('skill-proficient')) {
      const isCustom = e.target.dataset.custom === 'true';
      const index = parseInt(e.target.dataset.index);
      
      if (isCustom) {
        customSkills[index].proficient = e.target.checked;
        customSkillsInput.value = JSON.stringify(customSkills);
        saveField('customSkills', JSON.stringify(customSkills));
      } else {
        skills[index].proficient = e.target.checked;
        skillsInput.value = JSON.stringify(skills);
        saveField('skills', JSON.stringify(skills));
      }
      
      // Update skill modifiers after proficiency changes
      updateModifiers();
    }
  });
  
  // Add new custom skill
  document.getElementById('addSkillBtn').addEventListener('click', function() {
    // Create a new custom skill with default values
    const newSkill = {
      name: 'New Skill',
      ability: 'dexterity', // Default ability
      proficient: false
    };
    
    customSkills.push(newSkill);
    customSkillsInput.value = JSON.stringify(customSkills);
    saveField('customSkills', JSON.stringify(customSkills));
    
    // Re-render the skills list
    sortAndRenderSkills();
  });
  
  // Function to sort and render all skills alphabetically
  function sortAndRenderSkills() {
    // Combine all skills (standard and custom) into one array for sorting
    const allSkills = [
      ...skills.map(skill => ({ ...skill, isCustom: false, index: skills.indexOf(skill) })),
      ...customSkills.map(skill => ({ ...skill, isCustom: true, index: customSkills.indexOf(skill) }))
    ];
    
    // Sort alphabetically by name
    allSkills.sort((a, b) => a.name.localeCompare(b.name));
    
    // Clear the skills container
    skillsContainer.innerHTML = '';
    
    // Render all skills in alphabetical order
    allSkills.forEach(skill => {
      const abilities = {};
      abilityInputs.forEach(input => {
        abilities[input.id] = parseInt(input.value) || 10;
      });
      
      const abilityScore = abilities[skill.ability] || 10;
      const abilityMod = Math.floor((abilityScore - 10) / 2);
      const profBonus = parseInt(document.getElementById('proficiencyBonus').textContent.replace('+', '')) || 2;
      const totalBonus = abilityMod + (skill.proficient ? profBonus : 0);
      
      const skillItem = document.createElement('div');
      skillItem.className = 'skill-item' + (skill.isCustom ? ' custom-skill' : '');
      
      const customFlag = skill.isCustom ? 'data-custom="true"' : '';
      
      skillItem.innerHTML = `
        <input 
          type="checkbox" 
          id="${skill.isCustom ? 'custom_skill_' : 'skill_'}${skill.index}" 
          class="skill-proficient" 
          ${skill.proficient ? 'checked' : ''} 
          data-index="${skill.index}"
          ${customFlag}
        >
        <span class="skill-modifier">
          ${totalBonus >= 0 ? '+' : ''}${totalBonus}
        </span>
        ${skill.isCustom ? 
          `<span class="skill-name custom-skill-name-display">${skill.name}</span>
           <input type="text" class="custom-skill-name-edit" value="${skill.name}" data-index="${skill.index}" style="display: none;">
           <span class="skill-ability">(<span class="skill-ability-display">${skill.ability.charAt(0).toUpperCase()}</span>)</span>
           <select class="custom-skill-ability-edit" data-index="${skill.index}" style="display: none;">
             <option value="strength" ${skill.ability === 'strength' ? 'selected' : ''}>S</option>
             <option value="dexterity" ${skill.ability === 'dexterity' ? 'selected' : ''}>D</option>
             <option value="constitution" ${skill.ability === 'constitution' ? 'selected' : ''}>C</option>
             <option value="intelligence" ${skill.ability === 'intelligence' ? 'selected' : ''}>I</option>
             <option value="wisdom" ${skill.ability === 'wisdom' ? 'selected' : ''}>W</option>
             <option value="charisma" ${skill.ability === 'charisma' ? 'selected' : ''}>C</option>
           </select>
           <button type="button" class="remove-skill-btn" data-index="${skill.index}" style="display: none;">×</button>`
          : 
          `<span class="skill-name">${skill.name}</span>
           <span class="skill-ability">(${skill.ability.charAt(0).toUpperCase()})</span>`
        }
      `;
      
      skillsContainer.appendChild(skillItem);
      
      // Add double-click listener for custom skills to make them editable
      if (skill.isCustom) {
        const skillElement = skillItem;
        
        // Make the skill editable on double-click
        skillElement.addEventListener('dblclick', function() {
          const nameDisplay = this.querySelector('.custom-skill-name-display');
          const nameEdit = this.querySelector('.custom-skill-name-edit');
          const abilityDisplay = this.querySelector('.skill-ability-display').parentElement;
          const abilityEdit = this.querySelector('.custom-skill-ability-edit');
          const removeBtn = this.querySelector('.remove-skill-btn');
          
          // Switch to edit mode
          if (nameDisplay) nameDisplay.style.display = 'none';
          if (nameEdit) {
            nameEdit.style.display = 'inline-block';
            nameEdit.focus();
          }
          if (abilityDisplay) abilityDisplay.style.display = 'none';
          if (abilityEdit) abilityEdit.style.display = 'inline-block';
          if (removeBtn) removeBtn.style.display = 'inline-block';
        });
        
        // Function to exit edit mode
        const exitEditMode = function(skillElement) {
          const nameDisplay = skillElement.querySelector('.custom-skill-name-display');
          const nameEdit = skillElement.querySelector('.custom-skill-name-edit');
          const abilityDisplay = skillElement.querySelector('.skill-ability-display').parentElement;
          const abilityEdit = skillElement.querySelector('.custom-skill-ability-edit');
          const removeBtn = skillElement.querySelector('.remove-skill-btn');
          
          // Update displayed text
          if (nameDisplay && nameEdit) nameDisplay.textContent = nameEdit.value;
          if (abilityDisplay && abilityEdit) 
            skillElement.querySelector('.skill-ability-display').textContent = abilityEdit.options[abilityEdit.selectedIndex].text;
          
          // Switch back to display mode
          if (nameDisplay) nameDisplay.style.display = 'inline-block';
          if (nameEdit) nameEdit.style.display = 'none';
          if (abilityDisplay) abilityDisplay.style.display = 'inline-block';
          if (abilityEdit) abilityEdit.style.display = 'none';
          if (removeBtn) removeBtn.style.display = 'none';
          
          // Save changes
          const index = parseInt(nameEdit.dataset.index);
          customSkills[index].name = nameEdit.value;
          customSkills[index].ability = abilityEdit.value;
          
          customSkillsInput.value = JSON.stringify(customSkills);
          saveField('customSkills', JSON.stringify(customSkills));
          
          // Update modifier for the changed ability
          updateModifiers();
        };
        
        // Exit edit mode on blur
        const nameEdit = skillElement.querySelector('.custom-skill-name-edit');
        const abilityEdit = skillElement.querySelector('.custom-skill-ability-edit');
        
        if (nameEdit) {
          nameEdit.addEventListener('blur', function() {
            // Short delay to allow other elements to get focus
            setTimeout(() => {
              // If neither edit field has focus, exit edit mode
              if (document.activeElement !== nameEdit && document.activeElement !== abilityEdit) {
                exitEditMode(skillElement);
              }
            }, 100);
          });
          
          // Exit edit mode on Enter key
          nameEdit.addEventListener('keydown', function(e) {
            if (e.key === 'Enter') {
              exitEditMode(skillElement);
            }
          });
        }
        
        if (abilityEdit) {
          abilityEdit.addEventListener('blur', function() {
            setTimeout(() => {
              if (document.activeElement !== nameEdit && document.activeElement !== abilityEdit) {
                exitEditMode(skillElement);
              }
            }, 100);
          });
          
          abilityEdit.addEventListener('change', function() {
            // When ability changes, update the modifier immediately
            const index = parseInt(this.dataset.index);
            customSkills[index].ability = this.value;
            
            const abilityScore = abilities[this.value] || 10;
            const abilityMod = Math.floor((abilityScore - 10) / 2);
            const profBonus = parseInt(document.getElementById('proficiencyBonus').textContent.replace('+', '')) || 2;
            const totalBonus = abilityMod + (customSkills[index].proficient ? profBonus : 0);
            
            const modifierDisplay = skillElement.querySelector('.skill-modifier');
            if (modifierDisplay) {
              modifierDisplay.textContent = (totalBonus >= 0 ? '+' : '') + totalBonus;
            }
          });
        }
        
        // Handle remove button
        const removeBtn = skillElement.querySelector('.remove-skill-btn');
        if (removeBtn) {
          removeBtn.addEventListener('click', function() {
            const index = parseInt(this.dataset.index);
            customSkills.splice(index, 1);
            customSkillsInput.value = JSON.stringify(customSkills);
            saveField('customSkills', JSON.stringify(customSkills));
            
            // Re-render the skills list
            sortAndRenderSkills();
          });
        }
      }
    });
  }
  
  // Initialize by sorting and rendering all skills
  sortAndRenderSkills();
  
  // Ability-based Mana Toggle functionality
  const manaContainer = document.querySelector('.mana-container');
  const manaToggleIcons = document.querySelectorAll('.mana-toggle-icon');
  const abilityCards = document.querySelectorAll('.ability-card');
  const manaHeaderText = document.getElementById('manaHeaderText');
  
  // Initialize the container visibility based on active state
  updateManaVisibility();
  
  // Add click listeners to all mana toggle icons
  manaToggleIcons.forEach(toggle => {
    toggle.addEventListener('click', function() {
      const ability = this.dataset.ability;
      const isCurrentlyActive = this.dataset.active === 'true';
      
      // Reset all toggles first
      manaToggleIcons.forEach(otherToggle => {
        otherToggle.textContent = otherToggle.dataset.ability === 'charisma' ? '★' : '○';
        otherToggle.dataset.active = 'false';
      });
      
      // Remove highlight from all ability cards
      abilityCards.forEach(card => {
        card.classList.remove('ability-card-active');
      });
      
      let newValue = null;
      
      // If the clicked toggle wasn't active, activate it
      if (!isCurrentlyActive) {
        if (ability === 'intelligence' || ability === 'wisdom') {
          this.textContent = '●';
        } else if (ability === 'charisma') {
          this.textContent = '★';
        }
        this.dataset.active = 'true';
        newValue = ability;
        
        // Add highlight to the clicked ability card
        this.closest('.ability-card').classList.add('ability-card-active');
      }
      
      // Update header
      if (manaHeaderText) {
        manaHeaderText.style.display = newValue ? '' : 'none';
      }
      
      // Update visibility
      updateManaVisibility();
      
      // Save the toggle state
      saveField('useManaAbility', newValue);
    });
  });
  
  function updateManaVisibility() {
    // Any toggle active?
    const anyToggleActive = Array.from(manaToggleIcons).some(toggle => toggle.dataset.active === 'true');
    
    // Show/hide mana container
    if (manaContainer) {
      manaContainer.style.display = anyToggleActive ? 'grid' : 'none';
    }
  }
  
  // HP Popup functionality
  const currentHPInput = document.getElementById('currentHitPoints');
  const maxHPInput = document.getElementById('maxHitPoints');
  let hpPopup = null;
  let isPopupOpen = false;
  
  // Create the HP popup
  function createHPPopup() {
    // Check if popup already exists
    if (hpPopup) {
      hpPopup.remove();
    }
  
    // Create popup container
    hpPopup = document.createElement('div');
    hpPopup.className = 'hp-popup';
    
    // Get the position of the current HP input
    const inputRect = currentHPInput.getBoundingClientRect();
    const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
    const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;
    
    // Position the popup below the input
    hpPopup.style.position = 'absolute';
    hpPopup.style.top = (inputRect.bottom + scrollTop) + 'px';
    hpPopup.style.left = (inputRect.left + scrollLeft) + 'px';
    hpPopup.style.zIndex = '1000';
    hpPopup.style.backgroundColor = 'white';
    hpPopup.style.padding = '10px';
    hpPopup.style.borderRadius = '8px';
    hpPopup.style.boxShadow = '0 2px 10px rgba(0, 0, 0, 0.2)';
    hpPopup.style.width = '220px';
    
    // Create popup content
    hpPopup.innerHTML = `
      <div style="margin-bottom: 10px;">
        <label style="display:block; margin-bottom: 5px;">Amount:</label>
        <input type="number" id="hpChangeAmount" min="1" value="1" style="width: 100%; padding: 5px;">
      </div>
      <div style="display: flex; gap: 10px; justify-content: space-between;">
        <button id="damageBtn" style="flex: 1; padding: 8px; background-color: #f44336; color: white; border: none; border-radius: 4px; cursor: pointer;">Damage</button>
        <button id="healBtn" style="flex: 1; padding: 8px; background-color: #4caf50; color: white; border: none; border-radius: 4px; cursor: pointer;">Healing</button>
      </div>
    `;
    
    // Add to document
    document.body.appendChild(hpPopup);
    
    // Focus on amount input
    const amountInput = document.getElementById('hpChangeAmount');
    amountInput.focus();
    amountInput.select();
    
    // Add event listeners
    document.getElementById('damageBtn').addEventListener('click', applyDamage);
    document.getElementById('healBtn').addEventListener('click', applyHealing);
    
    // Close popup when clicking outside
    document.addEventListener('click', handleOutsideClick);
    
    // Allow pressing Enter to apply damage (default action)
    amountInput.addEventListener('keypress', function(e) {
      if (e.key === 'Enter') {
        applyDamage();
      }
    });
    
    isPopupOpen = true;
  }
  
  // Apply damage (subtract HP)
  function applyDamage() {
    const amount = parseInt(document.getElementById('hpChangeAmount').value) || 0;
    if (amount <= 0) return;
    
    let currentHP = parseInt(currentHPInput.value) || 0;
    currentHP = Math.max(0, currentHP - amount); // Don't go below 0
    
    currentHPInput.value = currentHP;
    
    // Save the change if auto-save is enabled
    saveField('hitPoints.current', currentHP);
    
    closePopup();
  }
  
  // Apply healing (add HP)
  function applyHealing() {
    const amount = parseInt(document.getElementById('hpChangeAmount').value) || 0;
    if (amount <= 0) return;
    
    let currentHP = parseInt(currentHPInput.value) || 0;
    const maxHP = parseInt(maxHPInput.value) || 0;
    currentHP = Math.min(maxHP, currentHP + amount); // Don't exceed max HP
    
    currentHPInput.value = currentHP;
    
    // Save the change
    saveField('hitPoints.current', currentHP);
    
    closePopup();
  }
  
  // Close the popup
  function closePopup() {
    if (hpPopup) {
      hpPopup.remove();
      hpPopup = null;
      document.removeEventListener('click', handleOutsideClick);
      isPopupOpen = false;
    }
  }
  
  // Handle clicks outside the popup to close it
  function handleOutsideClick(e) {
    if (isPopupOpen && hpPopup && !hpPopup.contains(e.target) && e.target !== currentHPInput) {
      closePopup();
    }
  }
  
  // Modify the click handler for current HP
  if (currentHPInput) {
    currentHPInput.addEventListener('click', function(e) {
      e.stopPropagation(); // Prevent triggering document click
      if (!isPopupOpen) {
        createHPPopup();
      }
    });
  
    // Ensure current HP remains read-only
    currentHPInput.readOnly = true;
  
    // Add a small indicator to show it's clickable
    currentHPInput.style.cursor = 'pointer';
    currentHPInput.title = 'Click to adjust HP';
  }
  
  // Rest buttons functionality
  const shortRestBtn = document.querySelector('.short-rest-button');
  const longRestBtn = document.querySelector('.long-rest-button');
  
  if (shortRestBtn) {
    shortRestBtn.addEventListener('click', function() {
      showRestAnimation('Short Rest', '🌙', '#3f51b5');
      
      // Handle Mana recovery (custom rule - half mana)
      const currentMana = document.getElementById('currentMana');
      const maxMana = document.getElementById('maxMana');
      
      if (currentMana && maxMana) {
        const currentManaValue = parseInt(currentMana.value) || 0;
        const maxManaValue = parseInt(maxMana.value) || 0;
        const recoveredMana = Math.floor(maxManaValue / 2);
        const newManaValue = Math.min(maxManaValue, currentManaValue + recoveredMana);
        
        currentMana.value = newManaValue;
        saveField('mana.current', newManaValue);
      }
    });
  }
  
  if (longRestBtn) {
    longRestBtn.addEventListener('click', function() {
      showRestAnimation('Long Rest', '☀️', '#7b2cbf');
      
      // Handle HP recovery (full HP)
      const currentHP = document.getElementById('currentHitPoints');
      const maxHP = document.getElementById('maxHitPoints');
      
      if (currentHP && maxHP) {
        const maxHPValue = parseInt(maxHP.value) || 0;
        currentHP.value = maxHPValue;
        saveField('hitPoints.current', maxHPValue);
      }
      
      // Handle mana recovery (full mana)
      const currentMana = document.getElementById('currentMana');
      const maxMana = document.getElementById('maxMana');
      
      if (currentMana && maxMana) {
        const maxManaValue = parseInt(maxMana.value) || 0;
        currentMana.value = maxManaValue;
        saveField('mana.current', maxManaValue);
      }
    });
  }
  
  // Show rest animation
  function showRestAnimation(type, emoji, color) {
    const restAnimContainer = document.getElementById('restAnimationContainer');
    const restAnimBox = restAnimContainer.querySelector('.rest-animation-box');
    const restAnimText = restAnimContainer.querySelector('.animation-text');
    const restAnimEmoji = restAnimContainer.querySelector('.animation-emoji');
    
    restAnimText.textContent = type;
    restAnimText.style.color = color;
    restAnimEmoji.textContent = emoji;
    restAnimBox.style.border = `2px solid ${color}`;
    
    restAnimContainer.style.visibility = 'visible';
    restAnimContainer.style.opacity = '1';
    
    setTimeout(() => {
      restAnimBox.style.transform = 'scale(1)';
    }, 10);
    
    setTimeout(() => {
      restAnimBox.style.transform = 'scale(0.8)';
      restAnimContainer.style.opacity = '0';
      
      setTimeout(() => {
        restAnimContainer.style.visibility = 'hidden';
      }, 300);
    }, 1500);
  }
  
  // Initialize the page
  // Fix for input selects and editable fields
  document.querySelectorAll('.editable-field').forEach(field => {
    field.addEventListener('click', function() {
      if (this.readOnly) {
        this.readOnly = false;
        this.focus();
      }
    });
  });
});


// Update the toggle icon functionality
document.addEventListener('DOMContentLoaded', function() {
  const manaToggleIcons = document.querySelectorAll('.mana-toggle-icon');
  
  // Add click listeners to all mana toggle icons
  manaToggleIcons.forEach(toggle => {
    toggle.addEventListener('click', function() {
      const ability = this.dataset.ability;
      const isCurrentlyActive = this.dataset.active === 'true';
      
      // Reset all toggles first
      manaToggleIcons.forEach(otherToggle => {
        otherToggle.dataset.active = 'false';
        otherToggle.textContent = '○'; // Empty circle when inactive
        otherToggle.style.opacity = '0.5';
      });
      
      // Remove highlight from all ability cards
      document.querySelectorAll('.ability-card').forEach(card => {
        card.classList.remove('ability-card-active');
      });
      
      let newValue = null;
      
      // If the clicked toggle wasn't active, activate it
      if (!isCurrentlyActive) {
        this.dataset.active = 'true';
        this.textContent = '●'; // Filled circle when active
        this.style.opacity = '1';
        this.style.color = '#3f51b5';
        newValue = ability;
        
        // Add highlight to the clicked ability card
        this.closest('.ability-card').classList.add('ability-card-active');
      }
      
      // Update visibility of mana container
      const manaContainer = document.querySelector('.mana-container');
      const manaHeaderText = document.getElementById('manaHeaderText');
      
      if (manaHeaderText) {
        manaHeaderText.style.display = newValue ? '' : 'none';
      }
      
      if (manaContainer) {
        manaContainer.style.display = newValue ? 'grid' : 'none';
      }
      
      // Save the toggle state
      saveField('useManaAbility', newValue);
    });
  });
  
  // Initialize the toggles on page load
  manaToggleIcons.forEach(toggle => {
    const isActive = toggle.dataset.active === 'true';
    
    if (isActive) {
      toggle.textContent = '●'; // Filled circle
      toggle.style.opacity = '1';
      toggle.style.color = '#3f51b5';
    } else {
      toggle.textContent = '○'; // Empty circle
      toggle.style.opacity = '0.5';
    }
  });
});

</script>