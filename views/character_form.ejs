<style>
  /* Toggle Switch Styles for Ability Mana */
  .mana-switch {
    position: relative;
    display: inline-block;
    width: 24px;
    height: 14px;
    margin-left: 5px;
  }
  
  .mana-switch input {
    opacity: 0;
    width: 0;
    height: 0;
  }
  
  .mana-slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #ccc;
    transition: .3s;
    border-radius: 14px;
  }
  
  .mana-slider:before {
    position: absolute;
    content: "";
    height: 10px;
    width: 10px;
    left: 2px;
    bottom: 2px;
    background-color: white;
    transition: .3s;
    border-radius: 50%;
  }
  
  input:checked + .mana-slider {
    background-color: #3f51b5;
  }
  
  input:checked + .mana-slider:before {
    transform: translateX(10px);
  }
  
  /* Style to indicate which ability is controlling mana */
  .mana-active-ability {
    border: 2px solid #3f51b5;
  }


  /* Star Toggle Styles for Ability Mana */
  .mana-toggle-star {
    font-size: 1.2rem;
    cursor: pointer;
    color: #3f51b5;
    transition: transform 0.2s, color 0.2s;
    user-select: none;
    width: 24px;
    height: 24px;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    vertical-align: middle;
    line-height: 1;
    padding-bottom: 2px; /* Fine-tune alignment */
  }
  
  .mana-toggle-star:hover {
    transform: scale(1.2);
  }
  
  /* Style to indicate which ability is controlling mana */
  .mana-active-ability {
    border: 2px solid #3f51b5;
    box-shadow: 0 0 5px rgba(63, 81, 181, 0.5);
  }
  
  /* Remove default bottom margin from labels to improve alignment */
  .ability-block label {
    margin-bottom: 0;
    line-height: 1.2;
  }
  

  
</style>


<!-- views/character_form.ejs -->
<div class="character-sheet-container">
  <div class="character-sheet-header">
    <h2><%= isNew ? 'Create New Character' : 'Edit Character' %></h2>
    <% if (!isNew) { %>
      <div class="save-status" id="saveStatus">All changes saved</div>
    <% } %>
    <div class="character-actions">
      <a href="/characters" class="btn btn-secondary">Back to Characters</a>
      <% if (isNew) { %>
        <button type="submit" form="characterForm" class="btn btn-primary">Create Character</button>
      <% } %>
    </div>
  </div>
  
  <form id="characterForm" action="/characters<%= isNew ? '' : '/' + characterId %>" method="POST" class="character-sheet">
    <% if (!isNew) { %>
      <input type="hidden" name="_method" value="PUT">
    <% } %>
    
<!-- Updated Character Header Section with correctly aligned proficiency bonus -->
<div class="character-header-section">
  <!-- Character name section -->
  <div class="form-group character-name-group">
    <label for="name">Character Name</label>
    <input type="text" id="name" name="name" value="<%= character.name %>" class="autosave editable-field" data-field="name" required readonly>
  </div>
  
  <!-- Character details section with proficiency in last row -->
  <div class="details-labels-row">
    <label for="class">Class</label>
    <label for="level">Level</label>
    <label for="race">Race</label>
    <label for="background">Background</label>
    <label for="alignment">Alignment</label>
    <label class="proficiency-label">Proficiency Bonus</label>
  </div>
  
  <div class="details-fields-row">
    <input type="text" id="class" name="class" value="<%= character.class %>" class="autosave editable-field" data-field="class" readonly>
    <input type="number" id="level" name="level" value="<%= character.level %>" min="1" max="20" class="autosave editable-field" data-field="level" readonly>
    <input type="text" id="race" name="race" value="<%= character.race %>" class="autosave editable-field" data-field="race" readonly>
    <input type="text" id="background" name="background" value="<%= character.background || '' %>" class="autosave editable-field" data-field="background" readonly>
    <select id="alignment" name="alignment" class="autosave editable-field" data-field="alignment" readonly>
      <option value="" <%= !character.alignment ? 'selected' : '' %>>Select Alignment</option>
      <option value="Lawful Good" <%= character.alignment === 'Lawful Good' ? 'selected' : '' %>>Lawful Good</option>
      <option value="Neutral Good" <%= character.alignment === 'Neutral Good' ? 'selected' : '' %>>Neutral Good</option>
      <option value="Chaotic Good" <%= character.alignment === 'Chaotic Good' ? 'selected' : '' %>>Chaotic Good</option>
      <option value="Lawful Neutral" <%= character.alignment === 'Lawful Neutral' ? 'selected' : '' %>>Lawful Neutral</option>
      <option value="True Neutral" <%= character.alignment === 'True Neutral' ? 'selected' : '' %>>True Neutral</option>
      <option value="Chaotic Neutral" <%= character.alignment === 'Chaotic Neutral' ? 'selected' : '' %>>Chaotic Neutral</option>
      <option value="Lawful Evil" <%= character.alignment === 'Lawful Evil' ? 'selected' : '' %>>Lawful Evil</option>
      <option value="Neutral Evil" <%= character.alignment === 'Neutral Evil' ? 'selected' : '' %>>Neutral Evil</option>
      <option value="Chaotic Evil" <%= character.alignment === 'Chaotic Evil' ? 'selected' : '' %>>Chaotic Evil</option>
    </select>
    <div class="proficiency-display">
      <span id="proficiencyBonus">+<%= Math.floor((character.level - 1) / 4) + 2 %></span>
    </div>
  </div>
</div>


    
    <!-- Main Character Sheet Layout (3 columns) -->
    <div class="character-main-section">
      <!-- Left Column: Abilities and Skills -->
      <div class="character-column abilities-column">
        <h3>Abilities</h3>
        <div class="abilities-container">
          <% const abilities = [
            { key: 'strength', name: 'Strength' },
            { key: 'dexterity', name: 'Dexterity' },
            { key: 'constitution', name: 'Constitution' },
            { key: 'intelligence', name: 'Intelligence' },
            { key: 'wisdom', name: 'Wisdom' },
            { key: 'charisma', name: 'Charisma' }
          ]; %>
          
          <% abilities.forEach(ability => { %>
            <div class="ability-block <%= character.useManaAbility === ability.key ? 'mana-active-ability' : '' %>">
              <div style="display: flex; justify-content: space-between; width: 100%; align-items: center; margin-bottom: 5px;">
                <label for="<%= ability.key %>" style="margin-bottom: 0;"><%= ability.name %></label>
                <% if (ability.key === 'intelligence' || ability.key === 'wisdom' || ability.key === 'charisma') { %>
                  <span 
                    class="mana-toggle-star" 
                    data-ability="<%= ability.key %>" 
                    data-active="<%= character.useManaAbility === ability.key %>"
                    title="Toggle Mana Casting Ability"
                  >
                    <%= character.useManaAbility === ability.key ? '★' : '○' %>
                  </span>
                <% } %>
              </div>
              <input 
                type="number" 
                id="<%= ability.key %>" 
                name="<%= ability.key %>" 
                value="<%= character.abilities[ability.key] %>" 
                min="1" 
                max="30" 
                class="ability-score autosave editable-field" 
                data-field="abilities.<%= ability.key %>"
                readonly
              >
              <div class="ability-modifier">
                <%= Math.floor((character.abilities[ability.key] - 10) / 2) >= 0 ? '+' : '' %><%= Math.floor((character.abilities[ability.key] - 10) / 2) %>
              </div>
            </div>
          <% }); %>


          <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem;">
            <span></span> <!-- Empty span to maintain spacing -->
          </div>
        </div>
        
        <h3>Skills</h3>
        <div class="skills-container" id="skillsContainer">
          <% character.skills.forEach((skill, index) => { %>
            <div class="skill-item">
              <input 
                type="checkbox" 
                id="skill_<%= index %>" 
                class="skill-proficient" 
                <%= skill.proficient ? 'checked' : '' %> 
                data-index="<%= index %>"
              >
              <span class="skill-modifier">
                <%= Math.floor((character.abilities[skill.ability] - 10) / 2) + (skill.proficient ? 2 : 0) >= 0 ? '+' : '' %><%= Math.floor((character.abilities[skill.ability] - 10) / 2) + (skill.proficient ? 2 : 0) %>
              </span>
              <span class="skill-name"><%= skill.name %></span>
              <span class="skill-ability">(<%= skill.ability.charAt(0).toUpperCase() %>)</span>
            </div>
          <% }); %>
          
          <!-- Custom Skills -->
          <% if (character.customSkills && character.customSkills.length > 0) { %>
            <% character.customSkills.forEach((skill, index) => { %>
              <div class="skill-item custom-skill">
                <input 
                  type="checkbox" 
                  id="custom_skill_<%= index %>" 
                  class="skill-proficient" 
                  <%= skill.proficient ? 'checked' : '' %> 
                  data-index="<%= index %>"
                  data-custom="true"
                >
                <span class="skill-modifier">
                  <%= Math.floor((character.abilities[skill.ability] - 10) / 2) + (skill.proficient ? 2 : 0) >= 0 ? '+' : '' %><%= Math.floor((character.abilities[skill.ability] - 10) / 2) + (skill.proficient ? 2 : 0) %>
                </span>
                <input 
                  type="text" 
                  class="custom-skill-name" 
                  value="<%= skill.name %>" 
                  data-index="<%= index %>"
                >
                <select class="custom-skill-ability" data-index="<%= index %>">
                  <% abilities.forEach(ability => { %>
                    <option value="<%= ability.key %>" <%= skill.ability === ability.key ? 'selected' : '' %>>
                      <%= ability.key.charAt(0).toUpperCase() %>
                    </option>
                  <% }); %>
                </select>
                <button type="button" class="remove-skill-btn" data-index="<%= index %>">×</button>
              </div>
            <% }); %>
          <% } %>
        </div>
        
        <button type="button" id="addSkillBtn" class="btn btn-small">Add Custom Skill</button>
      </div>
      
      <!-- Middle Column: Combat Stats -->
      <div class="character-column combat-column">
        <div class="combat-stats">
          <div class="stat-block">
            <label for="armorClass">AC</label>
            <input 
              type="number" 
              id="armorClass" 
              name="armorClass" 
              value="<%= character.armorClass || 10 %>" 
              class="autosave editable-field" 
              data-field="armorClass"
              readonly
            >
          </div>
          
          <div class="stat-block">
            <label for="initiative">Initiative</label>
            <input 
              type="number" 
              id="initiative" 
              name="initiative" 
              value="<%= character.initiative || 0 %>" 
              class="autosave editable-field" 
              data-field="initiative"
              readonly
            >
          </div>
          
          <div class="stat-block">
            <label for="speed">Speed</label>
            <input 
              type="number" 
              id="speed" 
              name="speed" 
              value="<%= character.speed || 30 %>" 
              class="autosave editable-field" 
              data-field="speed"
              readonly
            >
          </div>
        </div>

        
<!-- Update this section in character_form.ejs -->
<div class="hit-points">
  <h4 id="hpManaHeader">Hit Points<span id="manaHeaderText" style="<%= character.useManaAbility ? '' : 'display: none;' %>"> and Mana</span></h4>
    <div class="hp-container">
    <div class="form-group">
      <label for="maxHitPoints">Maximum HP</label>
      <input 
        type="number" 
        id="maxHitPoints" 
        name="maxHitPoints" 
        value="<%= character.hitPoints ? character.hitPoints.maximum : '' %>" 
        class="autosave editable-field" 
        data-field="hitPoints.maximum"
        readonly
      >
    </div>
    
    <div class="form-group">
      <label for="currentHitPoints">Current HP <i class="fas fa-heartbeat" style="color: #f44336; font-size: 0.8rem; vertical-align: middle;"></i></label>
      <input 
        type="number" 
        id="currentHitPoints" 
        name="currentHitPoints" 
        value="<%= character.hitPoints ? character.hitPoints.current : '' %>" 
        class="autosave editable-field" 
        data-field="hitPoints.current"
        readonly
      >
    </div>
  </div>
  
  <div class="hp-container mana-container">
    <div class="form-group">
      <label for="maxMana">Maximum Mana</label>
      <input 
        type="number" 
        id="maxMana" 
        name="maxMana" 
        value="<%= character.mana ? character.mana.maximum : '' %>" 
        class="autosave editable-field" 
        data-field="mana.maximum"
        readonly
      >
    </div>
    
    <div class="form-group">
      <label for="currentMana">Current Mana <i class="fas fa-hat-wizard" style="color: #3f51b5; font-size: 0.8rem; vertical-align: middle;"></i></label>
      <input 
        type="number" 
        id="currentMana" 
        name="currentMana" 
        value="<%= character.mana ? character.mana.current : '' %>" 
        class="autosave editable-field" 
        data-field="mana.current"
        readonly
      >
    </div>
  </div>
</div>

        
        <div class="equipment-section">
          <h4>Equipment</h4>
          <textarea 
            id="equipment" 
            name="equipment" 
            class="autosave editable-field" 
            data-field="equipment"
            readonly
          ><%= character.equipment || '' %></textarea>
        </div>
      </div>
      
      <!-- Right Column: Features and Spells -->
      <div class="character-column features-column">
        <div class="features-section">
          <h4>Features & Traits</h4>
          <textarea 
            id="features" 
            name="features" 
            class="autosave editable-field" 
            data-field="features"
            readonly
          ><%= character.features || '' %></textarea>
        </div>
        
        <div class="spells-section">
          <h4>Spells</h4>
          <textarea 
            id="spells" 
            name="spells" 
            class="autosave editable-field" 
            data-field="spells"
            readonly
          ><%= character.spells || '' %></textarea>
        </div>
      </div>
    </div>
    
    <!-- Hidden fields for storing skills data -->
    <input type="hidden" id="skills" name="skills" value="<%= JSON.stringify(character.skills) %>">
    <input type="hidden" id="customSkills" name="customSkills" value="<%= JSON.stringify(character.customSkills || []) %>">
  </form>
</div>





<script>


// Ability-based Mana Star Toggle functionality
document.addEventListener('DOMContentLoaded', function() {
  const manaContainer = document.querySelector('.mana-container');
  const manaStarToggles = document.querySelectorAll('.mana-toggle-star');
  const abilityBlocks = document.querySelectorAll('.ability-block');
  const manaHeaderText = document.getElementById('manaHeaderText');
  
  // Initialize the container visibility based on active state
  updateManaVisibility();
  
  // Add click listeners to all mana star toggles
  manaStarToggles.forEach(toggle => {
    toggle.addEventListener('click', function(e) {
      const ability = e.target.dataset.ability;
      const isCurrentlyActive = e.target.dataset.active === 'true';
      
      // Reset all toggles first
      manaStarToggles.forEach(otherToggle => {
        otherToggle.textContent = '○';
        otherToggle.dataset.active = 'false';
      });
      
      // Remove highlight from all ability blocks
      abilityBlocks.forEach(block => {
        block.classList.remove('mana-active-ability');
      });
      
      let newValue = null;
      
      // If the clicked toggle wasn't active, activate it
      if (!isCurrentlyActive) {
        e.target.textContent = '★';
        e.target.dataset.active = 'true';
        newValue = ability;
        
        // Add highlight to the clicked ability block
        e.target.closest('.ability-block').classList.add('mana-active-ability');
      }
      
      // Update header
      if (manaHeaderText) {
        manaHeaderText.style.display = newValue ? '' : 'none';
      }
      
      // Update visibility
      updateManaVisibility();
      
      // Save the toggle state
      if (typeof saveField === 'function') {
        // Use immediate save function to ensure data is persisted
        saveField('useManaAbility', newValue);
      } else {
        // If saveField function doesn't exist, use direct fetch API
        const saveStatus = document.getElementById('saveStatus');
        if (saveStatus) {
          saveStatus.textContent = 'Saving...';
          saveStatus.classList.add('saving');
          
          // Get character ID from URL or data attribute
          const characterId = '<%= characterId %>';
          
          fetch('/characters/' + characterId, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ field: 'useManaAbility', value: newValue })
          })
          .then(response => response.json())
          .then(result => {
            saveStatus.textContent = 'All changes saved';
            saveStatus.classList.remove('saving');
            saveStatus.classList.add('saved');
            
            setTimeout(() => {
              saveStatus.classList.remove('saved');
            }, 2000);
          })
          .catch(error => {
            console.error("Error saving:", error);
            saveStatus.textContent = 'Error saving changes';
            saveStatus.classList.remove('saving');
            saveStatus.classList.add('error');
            
            setTimeout(() => {
              saveStatus.classList.remove('error');
            }, 3000);
          });
        }
      }
    });
  });
  
  function updateManaVisibility() {
    // Any toggle active?
    const anyToggleActive = Array.from(manaStarToggles).some(toggle => toggle.dataset.active === 'true');
    
    // Show/hide mana container
    if (manaContainer) {
      manaContainer.style.display = anyToggleActive ? 'grid' : 'none';
    }
  }
});

// HP Popup functionality
const currentHPInput = document.getElementById('currentHitPoints');
const maxHPInput = document.getElementById('maxHitPoints');
let hpPopup = null;
let isPopupOpen = false;

// Create the HP popup
function createHPPopup() {
  // Check if popup already exists
  if (hpPopup) {
    hpPopup.remove();
  }

  // Create popup container
  hpPopup = document.createElement('div');
  hpPopup.className = 'hp-popup';
  
  // Get the position of the current HP input
  const inputRect = currentHPInput.getBoundingClientRect();
  const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
  const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;
  
  // Position the popup below the input
  hpPopup.style.position = 'absolute';
  hpPopup.style.top = (inputRect.bottom + scrollTop) + 'px';
  hpPopup.style.left = (inputRect.left + scrollLeft) + 'px';
  hpPopup.style.zIndex = '1000';
  hpPopup.style.backgroundColor = 'white';
  hpPopup.style.padding = '10px';
  hpPopup.style.borderRadius = '8px';
  hpPopup.style.boxShadow = '0 2px 10px rgba(0, 0, 0, 0.2)';
  hpPopup.style.width = '220px';
  
  // Create popup content
  hpPopup.innerHTML = `
    <div style="margin-bottom: 10px;">
      <label style="display:block; margin-bottom: 5px;">Amount:</label>
      <input type="number" id="hpChangeAmount" min="1" value="1" style="width: 100%; padding: 5px;">
    </div>
    <div style="display: flex; gap: 10px; justify-content: space-between;">
      <button id="damageBtn" style="flex: 1; padding: 8px; background-color: #f44336; color: white; border: none; border-radius: 4px; cursor: pointer;">Damage</button>
      <button id="healBtn" style="flex: 1; padding: 8px; background-color: #4caf50; color: white; border: none; border-radius: 4px; cursor: pointer;">Healing</button>
    </div>
  `;
  
  // Add to document
  document.body.appendChild(hpPopup);
  
  // Focus on amount input
  const amountInput = document.getElementById('hpChangeAmount');
  amountInput.focus();
  
  // Add event listeners
  document.getElementById('damageBtn').addEventListener('click', applyDamage);
  document.getElementById('healBtn').addEventListener('click', applyHealing);
  
  // Close popup when clicking outside
  document.addEventListener('click', handleOutsideClick);
  
  // Allow pressing Enter to apply damage (default action)
  amountInput.addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
      applyDamage();
    }
  });
  
  isPopupOpen = true;
}

// Apply damage (subtract HP)
function applyDamage() {
  const amount = parseInt(document.getElementById('hpChangeAmount').value) || 0;
  if (amount <= 0) return;
  
  let currentHP = parseInt(currentHPInput.value) || 0;
  currentHP = Math.max(0, currentHP - amount); // Don't go below 0
  
  currentHPInput.value = currentHP;
  
  // Save the change if auto-save is enabled
  if (typeof saveField === 'function') {
    saveField('hitPoints.current', currentHP);
  }
  
  closePopup();
}

// Apply healing (add HP)
function applyHealing() {
  const amount = parseInt(document.getElementById('hpChangeAmount').value) || 0;
  if (amount <= 0) return;
  
  let currentHP = parseInt(currentHPInput.value) || 0;
  const maxHP = parseInt(maxHPInput.value) || 0;
  currentHP = Math.min(maxHP, currentHP + amount); // Don't exceed max HP
  
  currentHPInput.value = currentHP;
  
  // Save the change if auto-save is enabled
  if (typeof saveField === 'function') {
    saveField('hitPoints.current', currentHP);
  }
  
  closePopup();
}

// Close the popup
function closePopup() {
  if (hpPopup) {
    hpPopup.remove();
    hpPopup = null;
    document.removeEventListener('click', handleOutsideClick);
    isPopupOpen = false;
  }
}

// Handle clicks outside the popup to close it
function handleOutsideClick(e) {
  if (isPopupOpen && hpPopup && !hpPopup.contains(e.target) && e.target !== currentHPInput) {
    closePopup();
  }
}

// Modify the click handler for current HP
currentHPInput.addEventListener('click', function(e) {
  e.stopPropagation(); // Prevent triggering document click
  if (!isPopupOpen) {
    createHPPopup();
  }
});

// Ensure current HP remains read-only
currentHPInput.readOnly = true;

// Add a small indicator to show it's clickable
currentHPInput.style.cursor = 'pointer';
currentHPInput.title = 'Click to adjust HP';

// Mana Popup functionality
const currentManaInput = document.getElementById('currentMana');
const maxManaInput = document.getElementById('maxMana');
let manaPopup = null;
let isManaPopupOpen = false;

// Create the Mana popup
function createManaPopup() {
  // Check if popup already exists
  if (manaPopup) {
    manaPopup.remove();
  }

  // Create popup container
  manaPopup = document.createElement('div');
  manaPopup.className = 'hp-popup mana-popup';
  
  // Get the position of the current Mana input
  const inputRect = currentManaInput.getBoundingClientRect();
  const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
  const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;
  
  // Position the popup below the input
  manaPopup.style.position = 'absolute';
  manaPopup.style.top = (inputRect.bottom + scrollTop) + 'px';
  manaPopup.style.left = (inputRect.left + scrollLeft) + 'px';
  manaPopup.style.zIndex = '1000';
  manaPopup.style.backgroundColor = 'white';
  manaPopup.style.padding = '10px';
  manaPopup.style.borderRadius = '8px';
  manaPopup.style.boxShadow = '0 2px 10px rgba(0, 0, 0, 0.2)';
  manaPopup.style.width = '220px';
  
  // Create popup content
  manaPopup.innerHTML = `
    <div style="margin-bottom: 10px;">
      <label style="display:block; margin-bottom: 5px;">Amount:</label>
      <input type="number" id="manaChangeAmount" min="1" value="1" style="width: 100%; padding: 5px;">
    </div>
    <div style="display: flex; gap: 10px; justify-content: space-between;">
      <button id="spendBtn" style="flex: 1; padding: 8px; background-color: #3f51b5; color: white; border: none; border-radius: 4px; cursor: pointer;">Spend</button>
      <button id="restoreBtn" style="flex: 1; padding: 8px; background-color: #2196f3; color: white; border: none; border-radius: 4px; cursor: pointer;">Restore</button>
    </div>
  `;
  
  // Add to document
  document.body.appendChild(manaPopup);
  
  // Focus on amount input
  const amountInput = document.getElementById('manaChangeAmount');
  amountInput.focus();
  
  // Add event listeners
  document.getElementById('spendBtn').addEventListener('click', spendMana);
  document.getElementById('restoreBtn').addEventListener('click', restoreMana);
  
  // Close popup when clicking outside
  document.addEventListener('click', handleManaOutsideClick);
  
  // Allow pressing Enter to spend mana (default action)
  amountInput.addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
      spendMana();
    }
  });
  
  isManaPopupOpen = true;
}

// Spend mana (subtract mana)
function spendMana() {
  const amount = parseInt(document.getElementById('manaChangeAmount').value) || 0;
  if (amount <= 0) return;
  
  let currentMana = parseInt(currentManaInput.value) || 0;
  currentMana = Math.max(0, currentMana - amount); // Don't go below 0
  
  currentManaInput.value = currentMana;
  
  // Save the change if auto-save is enabled
  if (typeof saveField === 'function') {
    saveField('mana.current', currentMana);
  }
  
  closeManaPopup();
}

// Restore mana (add mana)
function restoreMana() {
  const amount = parseInt(document.getElementById('manaChangeAmount').value) || 0;
  if (amount <= 0) return;
  
  let currentMana = parseInt(currentManaInput.value) || 0;
  const maxMana = parseInt(maxManaInput.value) || 0;
  currentMana = Math.min(maxMana, currentMana + amount); // Don't exceed max mana
  
  currentManaInput.value = currentMana;
  
  // Save the change if auto-save is enabled
  if (typeof saveField === 'function') {
    saveField('mana.current', currentMana);
  }
  
  closeManaPopup();
}

// Close the mana popup
function closeManaPopup() {
  if (manaPopup) {
    manaPopup.remove();
    manaPopup = null;
    document.removeEventListener('click', handleManaOutsideClick);
    isManaPopupOpen = false;
  }
}

// Handle clicks outside the mana popup to close it
function handleManaOutsideClick(e) {
  if (isManaPopupOpen && manaPopup && !manaPopup.contains(e.target) && e.target !== currentManaInput) {
    closeManaPopup();
  }
}

// Set up the mana fields if they exist
if (currentManaInput && maxManaInput) {
  // Modify the click handler for current mana
  currentManaInput.addEventListener('click', function(e) {
    e.stopPropagation(); // Prevent triggering document click
    if (!isManaPopupOpen) {
      createManaPopup();
    }
  });

  // Ensure current mana remains read-only
  currentManaInput.readOnly = true;

  // Add a small indicator to show it's clickable
  currentManaInput.style.cursor = 'pointer';
  currentManaInput.title = 'Click to adjust Mana';
}
</script>