<!-- Complete character-sheet-container div -->
<div class="character-sheet-container">
  <div class="character-sheet-header">
    <h2><%= isNew ? 'Create New Character' : 'Edit Character' %></h2>
    <% if (!isNew) { %>
      <div class="save-status" id="saveStatus">All changes saved</div>
    <% } %>
    <div class="character-actions">
      <a href="/characters" class="btn btn-secondary">Back to Characters</a>
      <% if (isNew) { %>
        <button type="submit" form="characterForm" class="btn btn-primary">Create Character</button>
      <% } %>
    </div>
  </div>
  
  <form id="characterForm" action="/characters<%= isNew ? '' : '/' + characterId %>" method="POST" class="character-sheet">
    <% if (!isNew) { %>
      <input type="hidden" name="_method" value="PUT">
    <% } %>
    
    <!-- Character Header Section -->
    <div class="character-header-section">
      <!-- Character name section -->
      <div class="form-group character-name-group">
        <label for="name">Character Name</label>
        <input type="text" id="name" name="name" value="<%= character.name %>" class="autosave editable-field" data-field="name" required readonly>
      </div>
      
      <!-- Character details section with proficiency in last row -->
      <div class="details-labels-row">
        <label for="class">Class</label>
        <label for="level">Level</label>
        <label for="race">Race</label>
        <label for="background">Background</label>
        <label for="alignment">Alignment</label>
        <label class="proficiency-label">Proficiency Bonus</label>
      </div>
      
      <div class="details-fields-row">
        <input type="text" id="class" name="class" value="<%= character.class %>" class="autosave editable-field" data-field="class" readonly>
        <input type="number" id="level" name="level" value="<%= character.level %>" min="1" max="20" class="autosave editable-field" data-field="level" readonly>
        <input type="text" id="race" name="race" value="<%= character.race %>" class="autosave editable-field" data-field="race" readonly>
        <input type="text" id="background" name="background" value="<%= character.background || '' %>" class="autosave editable-field" data-field="background" readonly>
        <select id="alignment" name="alignment" class="autosave editable-field" data-field="alignment" readonly>
          <option value="" <%= !character.alignment ? 'selected' : '' %>>Select Alignment</option>
          <option value="Lawful Good" <%= character.alignment === 'Lawful Good' ? 'selected' : '' %>>Lawful Good</option>
          <option value="Neutral Good" <%= character.alignment === 'Neutral Good' ? 'selected' : '' %>>Neutral Good</option>
          <option value="Chaotic Good" <%= character.alignment === 'Chaotic Good' ? 'selected' : '' %>>Chaotic Good</option>
          <option value="Lawful Neutral" <%= character.alignment === 'Lawful Neutral' ? 'selected' : '' %>>Lawful Neutral</option>
          <option value="True Neutral" <%= character.alignment === 'True Neutral' ? 'selected' : '' %>>True Neutral</option>
          <option value="Chaotic Neutral" <%= character.alignment === 'Chaotic Neutral' ? 'selected' : '' %>>Chaotic Neutral</option>
          <option value="Lawful Evil" <%= character.alignment === 'Lawful Evil' ? 'selected' : '' %>>Lawful Evil</option>
          <option value="Neutral Evil" <%= character.alignment === 'Neutral Evil' ? 'selected' : '' %>>Neutral Evil</option>
          <option value="Chaotic Evil" <%= character.alignment === 'Chaotic Evil' ? 'selected' : '' %>>Chaotic Evil</option>
        </select>
        <div class="proficiency-display">
          <span id="proficiencyBonus">+<%= Math.floor((character.level - 1) / 4) + 2 %></span>
        </div>
      </div>
    </div>
    
    <!-- Main Character Sheet Layout (3 columns) -->
    <div class="character-main-section">
      <!-- Left Column: Abilities and Skills -->
      <div class="character-column abilities-column">

        <!-- Abilities in a grid layout (2x3) -->



<!-- This replaces the current abilities section in character_form.ejs -->
<h3 class="abilities-title">Abilities</h3>
<div class="abilities-grid">
  <% const abilities = [
    { key: 'strength', name: 'STRENGTH' },
    { key: 'dexterity', name: 'DEXTERITY' },
    { key: 'constitution', name: 'CONSTITUTION' },
    { key: 'intelligence', name: 'INTELLIGENCE', icon: 'circle' },
    { key: 'wisdom', name: 'WISDOM', icon: 'circle' },
    { key: 'charisma', name: 'CHARISMA', icon: 'star' }
  ]; %>
  
  <% abilities.forEach(ability => { %>
    <div class="ability-card <%= character.useManaAbility === ability.key ? 'ability-card-active' : '' %>">
      <div class="ability-name-container">
        <div class="ability-name"><%= ability.name %></div>
<!-- Update the icon part in your abilities loop -->
<% if (ability.key === 'intelligence' || ability.key === 'wisdom' || ability.key === 'charisma') { %>
  <span 
    class="mana-toggle-icon" 
    data-ability="<%= ability.key %>" 
    data-active="<%= character.useManaAbility === ability.key %>"
  >○</span>
<% } %>
      </div>
      
      <div class="ability-value">
        <input 
          type="number" 
          id="<%= ability.key %>" 
          name="<%= ability.key %>" 
          value="<%= character.abilities[ability.key] %>" 
          min="1" 
          max="30" 
          class="ability-score autosave editable-field" 
          data-field="abilities.<%= ability.key %>"
          readonly
        >
      </div>
      
      <div class="ability-modifier">
        <%= Math.floor((character.abilities[ability.key] - 10) / 2) >= 0 ? '+' : '' %><%= Math.floor((character.abilities[ability.key] - 10) / 2) %>
      </div>
    </div>
  <% }); %>
</div>


        <h3>Skills</h3>
        <div class="skills-list" id="skillsContainer">
          <% character.skills.forEach((skill, index) => { %>
            <div class="skill-item">
              <input 
                type="checkbox" 
                id="skill_<%= index %>" 
                class="skill-proficient" 
                <%= skill.proficient ? 'checked' : '' %> 
                data-index="<%= index %>"
              >
              <span class="skill-modifier">
                <%= Math.floor((character.abilities[skill.ability] - 10) / 2) + (skill.proficient ? 2 : 0) >= 0 ? '+' : '' %><%= Math.floor((character.abilities[skill.ability] - 10) / 2) + (skill.proficient ? 2 : 0) %>
              </span>
              <span class="skill-name"><%= skill.name %></span>
              <span class="skill-ability">(<%= skill.ability.charAt(0).toUpperCase() %>)</span>
            </div>
          <% }); %>
          
          <!-- Custom Skills -->
          <% if (character.customSkills && character.customSkills.length > 0) { %>
            <% character.customSkills.forEach((skill, index) => { %>
              <div class="skill-item custom-skill">
                <input 
                  type="checkbox" 
                  id="custom_skill_<%= index %>" 
                  class="skill-proficient" 
                  <%= skill.proficient ? 'checked' : '' %> 
                  data-index="<%= index %>"
                  data-custom="true"
                >
                <span class="skill-modifier">
                  <%= Math.floor((character.abilities[skill.ability] - 10) / 2) + (skill.proficient ? 2 : 0) >= 0 ? '+' : '' %><%= Math.floor((character.abilities[skill.ability] - 10) / 2) + (skill.proficient ? 2 : 0) %>
                </span>
                <input 
                  type="text" 
                  class="custom-skill-name" 
                  value="<%= skill.name %>" 
                  data-index="<%= index %>"
                >
                <select class="custom-skill-ability" data-index="<%= index %>">
                  <% abilities.forEach(ability => { %>
                    <option value="<%= ability.key %>" <%= skill.ability === ability.key ? 'selected' : '' %>>
                      <%= ability.key.charAt(0).toUpperCase() %>
                    </option>
                  <% }); %>
                </select>
                <button type="button" class="remove-skill-btn" data-index="<%= index %>">×</button>
              </div>
            <% }); %>
          <% } %>
        </div>
        
        <button type="button" id="addSkillBtn" class="btn btn-small">Add Custom Skill</button>
      </div>
      
      <!-- Middle Column: Combat Stats -->
      <div class="character-column combat-column">
        <div class="combat-stats">
          <div class="stat-block">
            <label for="armorClass">AC</label>
            <input 
              type="number" 
              id="armorClass" 
              name="armorClass" 
              value="<%= character.armorClass || 10 %>" 
              class="autosave editable-field" 
              data-field="armorClass"
              readonly
            >
          </div>
          
          <div class="stat-block">
            <label for="initiative">Initiative</label>
            <input 
              type="number" 
              id="initiative" 
              name="initiative" 
              value="<%= character.initiative || 0 %>" 
              class="autosave editable-field" 
              data-field="initiative"
              readonly
            >
          </div>
          
          <div class="stat-block">
            <label for="speed">Speed</label>
            <input 
              type="number" 
              id="speed" 
              name="speed" 
              value="<%= character.speed || 30 %>" 
              class="autosave editable-field" 
              data-field="speed"
              readonly
            >
          </div>
        </div>

        <div class="hit-points">
          <h4 id="hpManaHeader">Hit Points<span id="manaHeaderText" style="<%= character.useManaAbility ? '' : 'display: none;' %>">&nbsp;and Mana</span></h4>
          <div class="hp-container">
            <div class="form-group">
              <label for="maxHitPoints">Maximum HP</label>
              <input 
                type="number" 
                id="maxHitPoints" 
                name="maxHitPoints" 
                value="<%= character.hitPoints ? character.hitPoints.maximum : '' %>" 
                class="autosave editable-field" 
                data-field="hitPoints.maximum"
                readonly
              >
            </div>
            
            <div class="form-group">
              <label for="currentHitPoints">Current HP</label>
              <input 
                type="number" 
                id="currentHitPoints" 
                name="currentHitPoints" 
                value="<%= character.hitPoints ? character.hitPoints.current : '' %>" 
                class="autosave editable-field" 
                data-field="hitPoints.current"
                readonly
              >
            </div>
          </div>
          
          <div class="hp-container mana-container" style="<%= character.useManaAbility ? '' : 'display: none;' %>">
            <div class="form-group">
              <label for="maxMana">Maximum Mana</label>
              <input 
                type="number" 
                id="maxMana" 
                name="maxMana" 
                value="<%= character.mana ? character.mana.maximum : '' %>" 
                class="autosave editable-field" 
                data-field="mana.maximum"
                readonly
              >
            </div>
            
            <div class="form-group">
              <label for="currentMana">Current Mana</label>
              <input 
                type="number" 
                id="currentMana" 
                name="currentMana" 
                value="<%= character.mana ? character.mana.current : '' %>" 
                class="autosave editable-field" 
                data-field="mana.current"
                readonly
              >
            </div>
          </div>
        </div>
        
        <div class="equipment-section">
          <h4>Equipment</h4>
          <textarea 
            id="equipment" 
            name="equipment" 
            class="autosave editable-field" 
            data-field="equipment"
            readonly
          ><%= character.equipment || '' %></textarea>
        </div>
      </div>
      
      <!-- Right Column: Features and Spells -->
      <div class="character-column features-column">
        <div class="features-section">
          <h4>Features & Traits</h4>
          <textarea 
            id="features" 
            name="features" 
            class="autosave editable-field" 
            data-field="features"
            readonly
          ><%= character.features || '' %></textarea>
        </div>
        
        <div class="spells-section">
          <h4>Spells</h4>
          <textarea 
            id="spells" 
            name="spells" 
            class="autosave editable-field" 
            data-field="spells"
            readonly
          ><%= character.spells || '' %></textarea>
        </div>
      </div>
    </div>
    
    <!-- Hidden fields for storing skills data -->
    <input type="hidden" id="skills" name="skills" value="<%= JSON.stringify(character.skills) %>">
    <input type="hidden" id="customSkills" name="customSkills" value="<%= JSON.stringify(character.customSkills || []) %>">
  </form>
</div>

<!-- Rest Animation Container -->
<div id="restAnimationContainer">
  <div class="rest-animation-box">
    <div class="animation-text"></div>
    <div class="animation-emoji"></div>
  </div>
</div>

<!-- Load modular scripts -->
<script type="module" src="/js/characterSheet.js"></script>












<!-- Add this at the bottom of character_form.ejs before the closing </div> tag -->

<script>
  // Inline script for HP and Mana popups (fallback)
  document.addEventListener('DOMContentLoaded', function() {
    console.log('Inline HP/Mana popup script loaded');
    
    const currentHPInput = document.getElementById('currentHitPoints');
    const maxHPInput = document.getElementById('maxHitPoints');
    const currentManaInput = document.getElementById('currentMana');
    const maxManaInput = document.getElementById('maxMana');
    
    // Add click event to current HP input
    if (currentHPInput) {
      currentHPInput.addEventListener('click', function(e) {
        console.log('HP field clicked!');
        if (e.target.readOnly) {
          showHPPopup(e.target, maxHPInput);
        }
      });
    }
    
    // Add click event to current Mana input
    if (currentManaInput) {
      currentManaInput.addEventListener('click', function(e) {
        console.log('Mana field clicked!');
        if (e.target.readOnly) {
          showManaPopup(e.target, maxManaInput);
        }
      });
    }
    
    function showHPPopup(currentHPInput, maxHPInput) {
      // Create popup container
      let popup = document.createElement('div');
      popup.id = 'hpPopup';
      popup.style = `
        position: absolute;
        z-index: 1000;
        background-color: white;
        border: 1px solid #ddd;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
        padding: 15px;
        min-width: 250px;
      `;
      
      // Position popup near the input
      const rect = currentHPInput.getBoundingClientRect();
      popup.style.top = (rect.bottom + window.scrollY + 5) + 'px';
      popup.style.left = (rect.left + window.scrollX) + 'px';
      
      // Current values
      const currentHP = parseInt(currentHPInput.value) || 0;
      const maxHP = parseInt(maxHPInput.value) || 0;
      
      // Create popup content
      popup.innerHTML = `
        <h3 style="margin-top: 0; margin-bottom: 10px; font-size: 16px;">Modify Hit Points</h3>
        <div style="margin-bottom: 15px;">
          <p style="margin: 5px 0;">Current HP: ${currentHP} / ${maxHP}</p>
        </div>
        <div style="margin-bottom: 15px;">
          <label for="hpChangeAmount" style="display: block; margin-bottom: 5px;">Amount:</label>
          <input type="number" id="hpChangeAmount" value="0" min="0" style="width: 100%; padding: 5px;">
        </div>
        <div style="display: flex; justify-content: space-between;">
          <button id="hpDamageBtn" style="background-color: #f44336; color: white; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer;">Damage</button>
          <button id="hpHealBtn" style="background-color: #4caf50; color: white; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer;">Heal</button>
          <button id="hpCloseBtn" style="background-color: #ccc; color: black; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer;">Close</button>
        </div>
      `;
      
      // Add popup to body
      document.body.appendChild(popup);
      
      // Focus amount input
      const amountInput = document.getElementById('hpChangeAmount');
      amountInput.focus();
      amountInput.select();
      
      // Handle damage button click
      document.getElementById('hpDamageBtn').addEventListener('click', function() {
        const amount = parseInt(amountInput.value) || 0;
        if (amount > 0) {
          const newHP = Math.max(0, currentHP - amount);
          currentHPInput.value = newHP;
          saveField('hitPoints.current', newHP);
          popup.remove();
        }
      });
      
      // Handle heal button click
      document.getElementById('hpHealBtn').addEventListener('click', function() {
        const amount = parseInt(amountInput.value) || 0;
        if (amount > 0) {
          const newHP = Math.min(maxHP, currentHP + amount);
          currentHPInput.value = newHP;
          saveField('hitPoints.current', newHP);
          popup.remove();
        }
      });
      
      // Handle close button click
      document.getElementById('hpCloseBtn').addEventListener('click', function() {
        popup.remove();
      });
      
      // Close popup when clicking outside
      document.addEventListener('click', function closePopup(e) {
        if (!popup.contains(e.target) && e.target !== currentHPInput) {
          popup.remove();
          document.removeEventListener('click', closePopup);
        }
      });
    }
    
    function showManaPopup(currentManaInput, maxManaInput) {
      // Create popup container
      let popup = document.createElement('div');
      popup.id = 'manaPopup';
      popup.style = `
        position: absolute;
        z-index: 1000;
        background-color: white;
        border: 1px solid #ddd;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
        padding: 15px;
        min-width: 250px;
      `;
      
      // Position popup near the input
      const rect = currentManaInput.getBoundingClientRect();
      popup.style.top = (rect.bottom + window.scrollY + 5) + 'px';
      popup.style.left = (rect.left + window.scrollX) + 'px';
      
      // Current values
      const currentMana = parseInt(currentManaInput.value) || 0;
      const maxMana = parseInt(maxManaInput.value) || 0;
      
      // Create popup content
      popup.innerHTML = `
        <h3 style="margin-top: 0; margin-bottom: 10px; font-size: 16px;">Modify Mana Points</h3>
        <div style="margin-bottom: 15px;">
          <p style="margin: 5px 0;">Current Mana: ${currentMana} / ${maxMana}</p>
        </div>
        <div style="margin-bottom: 15px;">
          <label for="manaChangeAmount" style="display: block; margin-bottom: 5px;">Amount:</label>
          <input type="number" id="manaChangeAmount" value="0" min="0" style="width: 100%; padding: 5px;">
        </div>
        <div style="display: flex; justify-content: space-between;">
          <button id="manaSpendBtn" style="background-color: #3f51b5; color: white; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer;">Spend</button>
          <button id="manaRestoreBtn" style="background-color: #9c27b0; color: white; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer;">Restore</button>
          <button id="manaCloseBtn" style="background-color: #ccc; color: black; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer;">Close</button>
        </div>
      `;
      
      // Add popup to body
      document.body.appendChild(popup);
      
      // Focus amount input
      const amountInput = document.getElementById('manaChangeAmount');
      amountInput.focus();
      amountInput.select();
      
      // Handle spend button click
      document.getElementById('manaSpendBtn').addEventListener('click', function() {
        const amount = parseInt(amountInput.value) || 0;
        if (amount > 0) {
          const newMana = Math.max(0, currentMana - amount);
          currentManaInput.value = newMana;
          saveField('mana.current', newMana);
          popup.remove();
        }
      });
      
      // Handle restore button click
      document.getElementById('manaRestoreBtn').addEventListener('click', function() {
        const amount = parseInt(amountInput.value) || 0;
        if (amount > 0) {
          const newMana = Math.min(maxMana, currentMana + amount);
          currentManaInput.value = newMana;
          saveField('mana.current', newMana);
          popup.remove();
        }
      });
      
      // Handle close button click
      document.getElementById('manaCloseBtn').addEventListener('click', function() {
        popup.remove();
      });
      
      // Close popup when clicking outside
      document.addEventListener('click', function closePopup(e) {
        if (!popup.contains(e.target) && e.target !== currentManaInput) {
          popup.remove();
          document.removeEventListener('click', closePopup);
        }
      });
    }
    
    // Helper function to save field to server
    function saveField(fieldName, fieldValue) {
      // Get character ID
      const characterId = window.location.pathname.split('/').pop();
      
      // Update save status if it exists
      const saveStatus = document.getElementById('saveStatus');
      if (saveStatus) {
        saveStatus.textContent = 'Saving...';
        saveStatus.className = 'save-status saving';
      }
      
      // Send data to server
      fetch(`/characters/${characterId}?_method=PUT`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          field: fieldName,
          value: fieldValue
        })
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        return response.json();
      })
      .then(data => {
        if (saveStatus) {
          saveStatus.textContent = 'All changes saved';
          saveStatus.className = 'save-status saved';
        }
      })
      .catch(error => {
        console.error('Error saving field:', error);
        if (saveStatus) {
          saveStatus.textContent = 'Error saving changes';
          saveStatus.className = 'save-status error';
        }
      });
    }
  });
  </script>